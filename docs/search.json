[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book provides detailed descriptions R code serving purposes transparency reproducibility ribosome footprints analysis publication: DUX4 orchestrates translational reprograming.","code":""},{"path":"index.html","id":"samples-and-treatments","chapter":"1 About","heading":"1.1 Samples and treatments","text":"processed data sets RNA-seq Ribo-seq data supporting manuscript reside data directory. RNA-seq Ribo-seq data sets transformed DESeq2DataSet instances consist triplicates untreated, IFN-gamma, DUX4, DUX4+INF-gamma treatments. Together, used find insights translational reprogramming DUX4.","code":""},{"path":"index.html","id":"softwear-requirement","chapter":"1 About","heading":"1.2 Softwear requirement","text":"R (>=4.0.3): tidyverse project, knitr, bookdown, rmarkdownBioconductor: DESeq2, goseq, GenomicAlignment, GenomicFeature, ribosomeProfilingQC, etc.","code":""},{"path":"index.html","id":"data","chapter":"1 About","heading":"1.3 data","text":"data directory repo includes processed data sets used analyses:p_sites.rda: list GRagnes instances processed p-sites 12 Ribo-seq samplesdds_cds.rda: list DESeqDataSet instances containing p-site counts CDS regions metadata (size factor treatment)dds_.rda: DESeqDataSet instances containing p-site counts different genomic features inclduing 5’ UTR 3’ UTR","code":""},{"path":"index.html","id":"txdb-annotation-package-for-gencode-v35","chapter":"1 About","heading":"1.4 TxDb annotation package for gencode v35","text":"Show make annotation TxDb package ","code":""},{"path":"index.html","id":"additional-scripts","chapter":"1 About","heading":"1.5 Additional scripts","text":"scripts directory contains R code shell scripts performing bioinformatics analysis manuscripts.","code":""},{"path":"preprocessing.html","id":"preprocessing","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2 Preprocessing Ribosome footprints sequencing data","text":"script performs preprocessing ribo-seq data. lists sections shell script preprocessing steps:Software:FastQC/0.11.9-Java-11cutadapt/2.7-GCCcore-8.3.0-Python-3.7.4Bowtie2/2.4.1-GCCcore-8.3.0SAMtools/1.10-GCCcore-8.3.0STAR/2.7.6a-foss-2019b","code":""},{"path":"preprocessing.html","id":"adapter-trimming","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.1 Adapter trimming","text":"Trimming forward 3’ adapter TGGAATTCTCGGGTGCCAAGG removing 4 bases front end trimming:-O 13 minimum overlap adapter match, 13 computed 9 plus 4 (9 minimum overlap 4 length unknown section). specify , adapter sequence match end every read (N matches anything), ten bases removed every read.step yielded reads 25 - 29 nt length.","code":"# for forward read, trim 3' adapter TGGAATTCTCGGGTGCCAAGG \ncutadapt --cores=4 -O 13 -a N{4}TGGAATTCTCGGGTGCCAAGG \\\n  -u 4 -m 25 \\\n  --untrimmed-output ${sample_name}_R1_untrimmed.fastq.gz \\ \n  -o ${sample_name}_R1_trimmed.fastq.gz \\\n  $fq1 > ${sample_name}_cutadapt_log.txt\n  \nfq=$trim_dir/${sample_name}_R1_trimmed.fastq.gz  "},{"path":"preprocessing.html","id":"remove-rrna-and-non-rrna-contamination-using-bowtie2","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.2 Remove rRNA and non-rRNA contamination using Bowtie2","text":"first used RNA central database identify rRNA sequences built rRNA reference genome rRNA_ref. Second, used GFF Gencode v35 extract small RNA (tRNA, snoRNA, sRNA, microRNA, etc) sequences customized reference genome rsoRNA_ref. used bowtie2 align trimmed reads rRNA reference genome. Next, took un-mapped aligned small RNA reference sequence. final un-mapped reads interest.","code":"# rRNA filter\nbowtie2 --seed=123 --threads=32 -x $rRNA_ref -U $fq -S ${sample_name}_R1.rRNA.sam \\\n  --un-gz=${sample_name}_R1_rFiltered.fq.gz \\\n  > ${sample_name}_R1_rRNA.bowtie2.log 2> ${sample_name}_R1_rRNA.bowtie2.log2\n# tRNA and snoRNA filter\nbowtie2 --seed=123 --threads=32 -x $tsoRNA_ref \\\n  -U ${sample_name}_R1_rFiltered.fq.gz \\\n  -S ${sample_name}_R1.tsoRNA.sam \\\n  --un-gz=${sample_name}_R1_rtsFiltered.fq.gz \\\n  > ${sample_name}_R1_tsoRNA.bowtie2.log 2>   ${sample_name}_R1_tsoRNA.bowtie2.log2"},{"path":"preprocessing.html","id":"alignment","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.3 Alignment","text":"took final un-mapped reads previous step aligned GRCh38.p13 STAR:See next chapter Ribo-seq specific quality control.","code":"STAR --runThreadN 4 --outSAMattributes NH HI NM MD AS nM jM jI XS \\\n  --genomeDir $star_index \\\n  --readFilesIn $filtered_dir/${sample_name}_R1_rtsFiltered.fq.gz \\\n  --outFileNamePrefix $bam_dir/${sample_name}_ \\\n  --sjdbOverhang 25 \\\n  --outFilterScoreMinOverLread 0 \\ \n  --outFilterMatchNminOverLread 0 \\\n  --outFilterMatchNmin 20 \\\n  --readFilesCommand zcat \\\n  --outSAMtype BAM SortedByCoordinate\n\nsamtools index $bam_dir/${sample_name}_Aligned.sortedByCoord.out.bam"},{"path":"rpfs-qc.html","id":"rpfs-qc","chapter":"3 Ribosome footprints quality control","heading":"3 Ribosome footprints quality control","text":"chapter, assessed quality ribosome footprints (RPFs) several aspects using Bioconductor’s ribosomeProfilingQC package -hoouse ad-hoc functions. aspects include:size RPFs: calculating size distribution RPFs, confirming RPFs congruent actual size ribosomes (26 - 29 nt)TSS -set enrichment: visualizing distance 5’ end reads start codon decide best -set p-sitesp-sites reading frames: estimating p-sites coordinates RPFs dominant length (26 - 29 nt) ensuring p-sites -frame around start codontrinucleotide periodicity transcripts: constructing meta-gene p-sites coverage plot, colored reading frames, show trinucleotide footprint periodicity 5’ UTR, CDS, 3’ UTRAfter ensuring quality RPFs p-sites, profiled PRFs counting p-sites different genomic features including 5’ UTR, CDS, 3’ UTR.main script performed RPFs QC . Note include BAM files repository. Since code chunks chapter involve BAM files therefore evaluated. means figures section pre-generated.","code":""},{"path":"rpfs-qc.html","id":"preparation","chapter":"3 Ribosome footprints quality control","heading":"3.1 Preparation","text":"code chunk loads libraries:Building sample information:","code":"\nlibrary(ribosomeProfilingQC)\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(Rsamtools)\nlibrary(GenomicFeatures)\nlibrary(GenomicAlignments)\nlibrary(hg38.HomoSapiens.Gencode.v35)\ntxdb <- hg38.HomoSapiens.Gencode.v35\nlibrary(BSgenome.Hsapiens.UCSC.hg38)\ngenome <- BSgenome.Hsapiens.UCSC.hg38\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 4L)\nregister(bp_param, default=TRUE)\n\npkg_dir <- \"/fh/fast/tapscott_s/CompBio/Ribo-seq/hg38.DUX4.IFN.ribofootprint.2\"\nscratch_dir <- \"/fh/scratch/delete90/tapscott_s/hg38.DUX4.IFN.ribofootprint.R1\"\nfig_dir <- file.path(pkg_dir, \"figures\", \"QC\")\nsource(file.path(pkg_dir, \"scripts\", \"tools.R\"))\nsource(file.path(pkg_dir, \"scripts\", \"fork_readsEndPlot.R\"))\nbam_dir <- file.path(scratch_dir, \"bam\", \"merged_bam_runs\")\nbam_files <- list.files(bam_dir, pattern=\".bam$\", full.names=TRUE)\nsample_info <- data.frame(\n  bam_files = bam_files <- list.files(bam_dir, pattern=\".bam$\", full.names=TRUE)) %>%\n    dplyr::mutate(sample_name = str_replace(basename(bam_files),\n                                            \".bam\", \"\"),\n                  treatment = str_replace(str_sub(sample_name, start=1L, end=-3L), \"[^_]+_\", \"\")) %>%\n    dplyr::mutate(treatment = factor(treatment, levels=c(\"untreated\", \"DOX-pulse\", \"IFNg\", \"DOX-pulse_IFNg\")))"},{"path":"rpfs-qc.html","id":"esitmate-the-optimal-read-lengths","chapter":"3 Ribosome footprints quality control","heading":"3.2 Esitmate the optimal read lengths","text":"code chunk uses ribosomePrfilingQC package get length RPFs reveals optimal read lengths. Fig 3.1 shows dominated RPF segment size ranges 26 29 nt.\nFigure 3.1: Distribution size RPF segments\n","code":"\n# (a) read length frequency\nread_length_freq <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  p_site <- estimatePsite(bam_file, CDS, genome)\n  pc <- getPsiteCoordinates(bam_file, bestpsite = p_site)\n  read_length_freq <- summaryReadsLength(pc, widthRange = c(25:39), plot=FALSE)\n})\nnames(read_length_freq) <- sample_info$sample_name\n\n# (b) tidy data\nlength_freq <- map_dfr(names(read_length_freq), function(x) {\n  as.data.frame(read_length_freq[[x]]) %>%\n    dplyr::rename(length=\"Var1\") %>%\n    add_column(sample_name=x) %>%\n    dplyr::mutate(order = as.numeric(length)) %>%\n    dplyr::mutate(length = as.numeric(as.character(length)))\n}) %>%\n  left_join(dplyr::select(sample_info, sample_name, treatment),\n            by=\"sample_name\") %>%\n  dplyr::arrange(treatment) %>%\n  dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n\n# (c) plot\nggplot(length_freq, aes(x=length, y=Freq)) +\n  geom_bar(stat=\"identity\", width=0.7) +\n  theme_bw() +\n  facet_wrap( ~ sample_name, nrow=4) +\n  labs(x=\"Read length\", y=\"Frequency\")\nggsave(file.path(fig_dir, \"freqment_size_frequency.pdf\"))\nknitr::include_graphics(\"images/freqment_size_frequency.pdf\")"},{"path":"rpfs-qc.html","id":"distance-from-5-end-of-reads-to-the-start-codon","chapter":"3 Ribosome footprints quality control","heading":"3.3 Distance from 5’ end of reads to the start codon","text":"distance 5’ end reads start codon CDS can help determine best position p-sites. Figure 3.2, 5’ end reads enriched 13 position upstream start codon. means best p-sites located 13th nucleotide RPF segment lots ribosome docking translation start sites.Note ribosomeProfilingQC::readsEndPlot() function meant make plot; however, function flaw fails reverse mapping genes negative strand. forked function collected mistake. (Later fork pakcage make available github, meanwhile, using fork_readsEndPlot scripts/fork_readsEndPlot.R).Code chunk tool tidy distance data.Restricting read length 26 29 nt, code estimates pileup 5’ end reads 30 position /-stream start codon:\nFigure 3.2: Distance 5 prime end reads start codon reveals best position p-site: 13 nucleotide shift\n","code":"\n.tidy_dist_data <- function(dist_list) {\n  dist <- map_dfr(names(dist_list), function(x) {\n    as.data.frame(dist_list[[x]]) %>%\n    dplyr::rename(counts = `dist_list[[x]]`) %>%\n    tibble::rownames_to_column(var = \"dist\") %>%\n    tibble::add_column(sample_name = x) %>%\n    dplyr::mutate(dist = factor(dist, levels=dist)) \n  }) %>%\n    dplyr::left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n    dplyr::arrange(treatment) %>%\n    dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n}\nread_length <- c(26:29)\n# (a) distance to start codon [-29, 30]\nstart_codon_30 <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  fork_readsEndPlot(bam_file, CDS, toStartCodon=TRUE, readLen=read_length, window=c(-29, 30))\n  #ribosomeProfilingQC::readsEndPlot(bam_file, CDS_pos, toStartCodon=TRUE, readLen=read_length,\n  #             window= c(-29, 30))\n})\nnames(start_codon_30) <- sample_info$sample_name\n\n# (b) tidy data and hist (bar)\n.tidy_dist_data <- function(dist_list) {\n  dist <- map_dfr(names(dist_list), function(x) {\n    as.data.frame(dist_list[[x]]) %>%\n    dplyr::rename(counts = `dist_list[[x]]`) %>%\n    tibble::rownames_to_column(var = \"dist\") %>%\n    tibble::add_column(sample_name = x) %>%\n    dplyr::mutate(dist = factor(dist, levels=dist)) \n  }) %>%\n    dplyr::left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n    dplyr::arrange(treatment) %>%\n    dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n}\n\ndist <- .tidy_dist_data(start_codon_30)\nggplot(dist, aes(x=dist, y=counts)) +\n  geom_bar(stat=\"identity\", width=0.7) +\n  theme_bw() +\n  labs(x=\"Distance from 5' end of reads to start codon\", y=\"counts\") +\n  facet_wrap( ~ sample_name, nrow=4, scale=\"free\") +\n  geom_vline(xintercept = which(dist$dist == 1),\n             linetype=\"dashed\", alpha=0.3, show.legend=FALSE) +\n  theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust=0.5, size=4),\n        panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),\n        panel.background = element_blank())\nggsave(file.path(fig_dir, \"distance_from_5end_to_start_codon_30-fork-readsEndPlot.pdf\"))#, width=8, height=6)\nknitr::include_graphics(\"images/distance_from_5end_to_start_codon_30-fork-readsEndPlot.pdf\")"},{"path":"rpfs-qc.html","id":"p-sites-and-reading-frames","chapter":"3 Ribosome footprints quality control","heading":"3.4 P-sites and reading frames","text":"use ribosomeProfilingQC::getPsiteCoordinates() ribosomeProfilingQC::assigneReadingFrame() get p-sites coordinates assign reading frames within annotated CDS. plotted p-sites around translation start sites colored reading frames. Figure 3.3 ensures p-sites correct -frame start codon.\nFigure 3.3: Reading frames p-sites annotated CDS around start codon\n","code":"\nreading_frame <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  p_site <- estimatePsite(bam_file, CDS, genome) # 13\n  pc <- getPsiteCoordinates(bam_file, bestpsite = p_site)\n  pc_sub <- pc[pc$qwidth %in% read_length]\n  pc_sub <- assignReadingFrame(pc_sub, CDS)\n  distance <- plotDistance2Codon(pc_sub)\n})\n\nnames(reading_frame) <- sample_info$sample_name\n\n# tidy reading_frame tool\n.tidy_reading_frame <- function(rf_list) {\n  rf <- map_dfr(names(rf_list), function(x) {\n    rf_list[[x]] %>% as.data.frame(stringsAsFactors=FALSE) %>%\n      dplyr::rename(index=\"Var1\", Frequency=\"Freq\") %>%\n      dplyr::mutate(index=as.numeric(index), Frequency=as.numeric(Frequency)) %>%\n      dplyr::mutate(frame = as.factor(index %% 3)) %>%\n      add_column(sample_name = x)\n  })\n}  \n\n# ggplot\ntidy_rf <- .tidy_reading_frame(reading_frame) %>%\n  left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n  dplyr::arrange(treatment) %>%\n  dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n\nggplot(tidy_rf, aes(x=index, y=Frequency, fill=frame)) +\n    geom_bar(stat=\"identity\", width=0.7) +\n    theme_minimal() +\n    facet_wrap( ~ sample_name, nrow=4, scale=\"free\") +\n    theme(legend.position=c(0.25, 0.93), legend.key.size = unit(0.3, 'cm'), \n          axis.text.x=element_text(size=5), panel.grid.major = element_blank()) +\n    labs(x=\"P site relative to start codon\", y=\"counts\") +\n    scale_x_continuous(breaks=seq(0, 50, 3)) +\n    scale_fill_brewer(palette=\"Dark2\")\nggsave(file.path(fig_dir, \"reading_frame_psite_to_start_codon.pdf\"), width=8, height=6)   \nknitr::include_graphics(\"images/reading_frame_psite_to_start_codon.pdf\")"},{"path":"rpfs-qc.html","id":"trinucleotide-periodicity-on-transcripts","chapter":"3 Ribosome footprints quality control","heading":"3.5 Trinucleotide periodicity on transcripts","text":", constructed reading frame frequency plot meta-gene plot p-sites coverage, colored reading frames, annotated 5’ UTR, CDS, 3’ UTR regions. Figure 3.4 Figure 3.5 confirmed (1) enriched RPFs docked translation start sties, (2) trinucleotide footprint periodicity occurred CDS.ribosomeProfilingQC::assigneReadingFrame() function assigns reading frames p-sites annotated CDS, wrote tools assign reading frame p-sites exclusively lay annotated UTR regions. Giving overview trinucleotide periodicity whole transcripts script constructed meta-gene p-sites coverage 5’ UTR, CDS, 3’ UTR regions, shown Figure 3.5.\nFigure 3.4: Reading frame frequency 5 prime UTR, CDS, 3 prime UTR\n\nFigure 3.5: Meta-gene p-sites coverage\n","code":"\nknitr::include_graphics(\"images/frame_frequency_by_regions_average_over_treatment.pdf\")\nknitr::include_graphics(\"images/reading_frame_periodicity_by_treatment_norm.pdf\")"},{"path":"profiling.html","id":"profiling","chapter":"4 P-sites profiling on genomic features","heading":"4 P-sites profiling on genomic features","text":"chapter, used ribosomeProfilingQC::getPsiteCoordinates() get p-sites coordinates. Due large size, p-sites dataset included repo. included p-sites profiling gene-based CDS transcripts-based genomic features 5’ UTR, /downstream 10 nt translation start site, 1st exon, 3’ UTR, saved DESeqDatSet instances.Code chunk loads libraries defines local tools:","code":"\nlibrary(DESeq2)\nlibrary(GenomicAlignments)\nlibrary(hg38.HomoSapiens.Gencode.v35)\ndata(gene.anno)\ntxdb <- hg38.HomoSapiens.Gencode.v35\n\n\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 12L)\nregister(bp_param, default=TRUE)\n\ncds_by_gene <- cdsBy(txdb, by=\"gene\")\nignore.strand <- FALSE\n\n#\n# tools\n#\n.get_col_row_data <- function(rse, txdb, dds_cds_by_gene) {\n  # colnames and append sample_info\n  colnames(rse) <- colnames(dds_cds_by_gene)\n  colData(rse) <- colData(dds_cds_by_gene)\n  # rowData: tx_name -> gene_id, gene_name, gene_type\n  tx_name <- rownames(rse)\n  df <- AnnotationDbi::select(txdb, keys=tx_name, columns=\"GENEID\", keytype=\"TXNAME\",\n                              multiVals=\"first\") %>% as.data.frame() %>%\n    dplyr::distinct(TXNAME, .keep_all=TRUE) %>%\n    dplyr::rename(tx_name=TXNAME, gene_id=GENEID) %>%\n    dplyr::left_join(as.data.frame(gene.anno), by=\"gene_id\") %>%\n    dplyr::select(tx_name, gene_id, gene_type, gene_name, hgnc_id)                       \n  rownames(df) <- df$tx_name\n  rowData(rse) <- df[rownames(rse), ]\n  \n  return(rse)\n}"},{"path":"profiling.html","id":"define-genomic-features","chapter":"4 P-sites profiling on genomic features","heading":"4.1 Define genomic features","text":"Code chunk defines annotated transcript-based genomic features 5’UTR, around translation start site (13 /downstream TSS), first exons, 3’ UTR.","code":"\n#\n# define features\n#\nfeature_5p  <- fiveUTRsByTranscript(txdb, use.name=TRUE)\nfeature_3p  <- threeUTRsByTranscript(txdb, use.name=TRUE)\nfeature_cds <- cdsBy(txdb, by=\"tx\", use.name=TRUE)\n\n.unique_UTRs <- function(utrs) {\n    # exclude UTRs that are not unique\n    exons_names_by_tx <- bplapply(utrs, function(gr)\n      paste(gr$exon_name, collapse=\",\"))\n    keep_tx <- as.data.frame(unlist(exons_names_by_tx)) %>% rownames_to_column(var=\"tx_name\") %>%\n                 dplyr::rename(exons_names=`unlist(exons_names_by_tx)`) %>%\n                 dplyr::distinct(exons_names, .keep_all=TRUE)\n    utrs[keep_tx$tx_name]                 \n}\n\nunique_feature_5p <- .unique_UTRs(utrs=feature_5p)\nunique_feature_3p <- .unique_UTRs(utrs=feature_3p)\n\n# first coding exon and TSS [-13, 13]\nfirst_exon_per_tx <- bplapply(feature_cds, function(gr) {\n  st <- as.character(strand(gr[1]))\n  if (st %in% c(\"+\", \"*\")) x <- gr[1]\n  if (st == \"-\") x <- gr[length(gr)]\n  return(x)\n})\nfirst_exon_per_tx <- GRangesList(first_exon_per_tx)\n\n.distinct_ranges <- function(gr) { # keeping distinct 1st coding exons only\n    mcols(gr)$rng <- as.character(gr)\n    gr_mcols <- as.data.frame(mcols(gr)) %>% dplyr::distinct(rng)\n    gr <- gr[names(gr) %in% rownames(gr_mcols)]\n}\n\n\nfirst_exon <- .distinct_ranges(unlist(first_exon_per_tx))\n#around_TSS <- promoters(first_exon, upstream=2, downstream=3)\naround_TSS <- promoters(first_exon, upstream=13, downstream=14) # 27 nucleotides, 13 up/downstream of TSS\n\ntx_based_features <- list(feature_5p=unique_feature_5p, \n                          feature_3p = unique_feature_3p,\n                          first_exon = first_exon, \n                          around_TSS = around_TSS)\nsave(tx_based_features, file=file.path(pkg_dir, \"data\", \"tx_based_features.rda\"))                          "},{"path":"profiling.html","id":"get-p-sites-coordinates","chapter":"4 P-sites profiling on genomic features","heading":"4.2 Get p-sites coordinates","text":"Code chunk uses ribosomeProfilingQC::getPsiteCoordinates() get p-sites coordinates save p_sites.rda.","code":"\nignore.strand <- FALSE\nyieldSize <- 1e+07\nbest_p_site <- 13\nreads_len <- c(26:29)\nanchor <- \"5end\"\n\n# (a) get p site coordinates (we load from )\nreads <- bplapply(sample_info$bam_files, function(f) {\n  bam_file <- BamFile(file = f)\n  pc <- getPsiteCoordinates(bam_file, bestpsite = best_p_site,\n                            anchor = anchor)\n  pc.sub <- pc[pc$qwidth %in% reads_len]\n})\nnames(reads) <- sample_info$sample_name\np_sites <- reads\nsave(p_sites, file=file.path(pkg_dir, \"data\", \"p_sites.rda\"))"},{"path":"profiling.html","id":"profiling-on-cds","chapter":"4 P-sites profiling on genomic features","heading":"4.2.1 Profiling on CDS","text":"Use GenomicAlignments::summarizeOverlaps() count p-sites CDS save DESeqDataSet size factor estimated DESeq2. size factor used normalized counts transcript-based genomic features later.","code":"\n# profiling\nrse_cds_by_gene <- bplapply(reads, function(pc) {\n  summarizeOverlaps(features=cds_by_gene, \n                    reads=pc, \n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_cds_by_gene <- do.call(cbind, rse_cds_by_gene)\n\n# tidy colData and rowData\ncolnames(rse_cds_by_gene) <- sample_info$sample_name\ncolData(rse_cds_by_gene) <- append(colData(rse_cds_by_gene), \n                                   as(sample_info, \"DataFrame\"))\nrowData(rse_cds_by_gene) <- gene.anno[rownames(rse_cds_by_gene), \n                                      c(\"gene_id\", \"gene_type\",\n                                        \"gene_name\", \"hgnc_id\")]\n# dds\ndds_cds_by_gene <- \n  DESeqDataSet(rse_cds_by_gene, design = ~treatment) # loose filtering             \ndds_cds_by_gene <- \n  dds_cds_by_gene[rowSums(counts(dds_cds_by_gene)) > 12]\ndds_cds_by_gene <- estimateSizeFactors(dds_cds_by_gene)\nsave(dds_cds_by_gene, file=file.path(pkg_dir, \"data\",\n                                    \"dds_cds_by_gene.rda\"))"},{"path":"profiling.html","id":"profiling-on-other-genomic-features","chapter":"4 P-sites profiling on genomic features","heading":"4.2.2 Profiling on other genomic features","text":"Profiling near translation start site [-13, 13]:","code":"\nload(file.path(pkg_dir, \"data\", \"p_sites.rda\")) # same as \"reads\" made previously\nload(file.path(pkg_dir, \"data\", \"dds_cds_by_gene.rda\")) # need the sizeFactor and column data\nload(file.path(pkg_dir, \"data\", \"tx_based_features.rda\")) # 5'UTR/TSS/1stExon/3'UTR\naround_TSS <- tx_based_features$around_TSS\nfeature_5p <- tx_based_features$feature_5p\nfeature_3p <- tx_based_features$feature_3p\nfirst_exon <- tx_based_features$first_exon\nfeature_cds <- cdsBy(txdb, by=\"tx\", use.name=TRUE)\nignore.strand <- FALSE\ninter.feature <- FALSE\n\nrse_TSS_by_tx <- bplapply(p_sites, function(pc) {\n    summarizeOverlaps(features=around_TSS, \n                      reads=pc, \n                      inter.feature=FALSE,\n                      ignore.strand=ignore.strand)\n})\nrse_TSS_by_tx <- do.call(cbind, rse_TSS_by_tx)\nrse_TSS_by_tx <- .get_col_row_data(rse_TSS_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\n\nsave(rse_TSS_by_tx, file=file.path(pkg_dir, \"data\", \"rse_TSS_by_tx.rda\")) \n# profile 5' UTR\nrse_5UTR_by_tx <- bplapply(p_sites, function(pc) {\n  summarizeOverlaps(features=feature_5p, \n                    reads=pc, \n                    singleEnd=TRUE,\n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_5UTR_by_tx <- do.call(cbind, rse_5UTR_by_tx)\nrse_5UTR_by_tx <- .get_col_row_data(rse_5UTR_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\nsave(rse_5UTR_by_tx, file=file.path(pkg_dir, \"data\", \"rse_5UTR_by_tx.rda\"))\n# profile on 1st exon\nrse_1st_exon_by_tx <- bplapply(p_sites, function(pc) {\n    summarizeOverlaps(features=first_exon, \n                    reads=pc, \n                    inter.feature=FALSE,\n                    ignore.strand=FALSE)\n})\nrse_1st_exon_by_tx <- do.call(cbind, rse_1st_exon_by_tx)\nrse_1st_exon_by_tx <- .get_col_row_data(rse=rse_1st_exon_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)      \nsave(rse_1st_exon_by_tx, file=file.path(pkg_dir, \"data\", \"rse_1st_exon_by_tx.rda\")) \n# profile by 3UTR\nrse_3UTR_by_tx <- bplapply(p_sites, function(pc) {\n  summarizeOverlaps(features=feature_3p, \n                    reads=pc, \n                    singleEnd=TRUE,\n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_3UTR_by_tx <- do.call(cbind, rse_3UTR_by_tx)\nrse_3UTR_by_tx <- .get_col_row_data(rse_3UTR_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\nsave(rse_3UTR_by_tx, file=file.path(pkg_dir, \"data\", \"rse_3UTR_by_tx.rda\"))"},{"path":"mRNA.html","id":"mRNA","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5 mRNA profiling and DUX4/IFNg induced genes","text":"chapter, performed mRNA profiling different genomic features identified DUX4 \\(IFN_{\\gamma}\\) induced genes.","code":""},{"path":"mRNA.html","id":"mrna-profiling","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.1 mRNA profiling","text":"Similar RPFs profiling, used GenomicAlignments::summarizedOverlaps() perform gene counting gene-based features—CDS exons—transcript-based features including 5’ UTR, around translation start site ([-13, 13]), first exon, 3’ TUR.Note mRNA profiling involved BAM files therefore results (DESeqDataSeq instance) code generated fly.Code chunk belows load libraries defines sample info meta data.Code chunks profiles mRNA different genomic features.Profiling exons genes:Profiling first exons transcripts:Profiling round translation start sites [-13, 13]:Profiling 5’ UTR 3’ UTR:","code":"\nlibrary(hg38.HomoSapiens.Gencode.v35)\ndata(gene.anno)\ntxdb <- hg38.HomoSapiens.Gencode.v35\nlibrary(GenomicAlignments)\nlibrary(tidyverse)\n\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 12L)\nregister(bp_param, default=TRUE)\n\n#\n# Define parameters and sample info\n#\npkg_dir <- \"/fh/fast/tapscott_s/CompBio/Ribo-seq/hg38.DUX4.IFN.ribofootprint.2\"\nrna_bam_dir <- \"/fh/fast/tapscott_s/CompBio/dchamm/DCH_Paired_RiboSeq_RNA-Seq_BAM_files\"\n\nsample_info <- data.frame(\n  bam_files = bam_files <- list.files(rna_bam_dir, pattern=\".bam$\", full.names=TRUE)) %>%\n    dplyr::mutate(sample_name = str_replace(basename(bam_files),\n                                            \".bam\", \"\"),\n                  treatment = str_replace(str_sub(sample_name,\n                                                  start=1L, end=-3L),\n                                          \"[^_]+_\", \"\")) %>%\n    dplyr::mutate(treatment = str_replace(treatment, \"-\", \"_\")) %>%\n    dplyr::mutate(treatment = recode(treatment, Untreated=\"untreated\")) %>%\n    dplyr::mutate(treatment = factor(treatment, \n                                     levels=c(\"untreated\",\n                                              \"DOX_pulse\", \"IFNg\",\n                                              \"DOX_pulse_IFNg\")))\nrownames(sample_info) <- sample_info$sample_name \n\n#\n# tools for tx_name\n#\n.get_row_data_txname <- function(rse, txdb) {\n  tx_name <- rownames(rse)\n  df <- AnnotationDbi::select(txdb, keys=tx_name, columns=\"GENEID\", keytype=\"TXNAME\",\n                              multiVals=\"first\") %>% as.data.frame() %>%\n    dplyr::distinct(TXNAME, .keep_all=TRUE) %>%\n    dplyr::rename(tx_name=TXNAME, gene_id=GENEID) %>%\n    dplyr::left_join(as.data.frame(gene.anno), by=\"gene_id\") %>%\n    dplyr::select(tx_name, gene_id, gene_type, gene_name, hgnc_id)                       \n  rownames(df) <- df$tx_name\n  rowData(rse) <- df[rownames(rse), ]\n  \n  return(rse)\n}\n# (a) tx-based features\nload(file.path(pkg_dir, \"data\", \"tx_based_features.rda\")) # 5'UTR/TSS/1stExon/3'UTR\naround_TSS <- tx_based_features$around_TSS\nfeature_5p <- tx_based_features$feature_5p\nfeature_3p <- tx_based_features$feature_3p\nfirst_exon <- tx_based_features$first_exon\n\n# (b) gene-based features\ncds <- cdsBy(txdb, by=\"gene\")\nexons <- exonsBy(txdb, by=\"gene\")\n\n#\n# CDS expression by genes\n#\nrse_cds_mRNA <- summarizeOverlaps(features = cds, \n                                  reads=BamFileList(sample_info$bam_files),\n                                  mode = \"IntersectionStrict\",\n                                  inter.feature = TRUE,\n                                  ignore.strand=TRUE)\ncolnames(rse_cds_mRNA) <- sample_info$sample_name                                  \ncolData(rse_cds_mRNA) <- as(sample_info, \"DataFrame\")\nrowData(rse_cds_mRNA) <- gene.anno[rownames(rse_cds_mRNA),\n                                   c(\"gene_id\", \"gene_type\",\n                                     \"gene_name\", \"hgnc_id\")]\nsave(rse_cds_mRNA, file=file.path(pkg_dir, \"data\",\n                                  \"rse_cds_mRNA.rda\"))  \n#\n# exons expression by genes\n#\nrse_exons_mRNA <- summarizeOverlaps(features = exons, \n                                  reads=BamFileList(sample_info$bam_files),\n                                  mode = \"IntersectionStrict\",\n                                  inter.feature = TRUE, ignore.strand=TRUE)\ncolnames(rse_exons_mRNA) <- sample_info$sample_name                                  \ncolData(rse_exons_mRNA) <- as(sample_info, \"DataFrame\")\nrowData(rse_exons_mRNA) <- gene.anno[rownames(rse_exons_mRNA),\n                                   c(\"gene_id\", \"gene_type\",\n                                     \"gene_name\", \"hgnc_id\")]\nsave(rse_exons_mRNA, file=file.path(pkg_dir, \"data\",\n                                    \"rse_exons_mRNA.rda\"))  \n#\n# first exon by transcripts (tx) - inherit sizeFactor from rse_cds_mRNA; must turn off inter.feature\n#\n\nrse_1st_exon_by_tx_mRNA <- \n  summarizeOverlaps(features = first_exon, \n                    reads=BamFileList(sample_info$bam_files),\n                    mode = \"IntersectionStrict\",\n                    inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_1st_exon_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_1st_exon_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_1st_exon_by_tx_mRNA <- .get_row_data_txname(rse_1st_exon_by_tx_mRNA, txdb)\nsave(rse_1st_exon_by_tx_mRNA, file=file.path(pkg_dir, \"data\", \"rse_1st_exon_by_tx_mRNA.rda\"))\n#\n# around TSS\n#\nrse_TSS_by_tx_mRNA <- \n    summarizeOverlaps(features = around_TSS, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_TSS_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_TSS_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_TSS_by_tx_mRNA <- .get_row_data_txname(rse_TSS_by_tx_mRNA, txdb)\nsave(rse_TSS_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                        \"rse_TSS_by_tx_mRNA.rda\"))  \n#\n# 5' UTR\n#\nrse_5UTR_by_tx_mRNA <- \n    summarizeOverlaps(features = feature_5p, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_5UTR_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_5UTR_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_5UTR_by_tx_mRNA <- .get_row_data_txname(rse_5UTR_by_tx_mRNA,\n                                            txdb)\nsave(rse_5UTR_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                         \"rse_5UTR_by_tx_mRNA.rda\"))\n#\n# 3' UTR\n#\nrse_3UTR_by_tx_mRNA <- \n    summarizeOverlaps(features = feature_3p, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_3UTR_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_3UTR_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_3UTR_by_tx_mRNA <- .get_row_data_txname(rse_3UTR_by_tx_mRNA, txdb)\nsave(rse_3UTR_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                         \"rse_3UTR_by_tx_mRNA.rda\"))"},{"path":"mRNA.html","id":"define-dux4-and-ifn-gamma-induced-genes","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.2 Define DUX4 and IFN-gamma induced genes","text":"used mRNA profiling CDS applied DESeq2 determine DUX4 \\(IFN_{\\gamma}\\) induced genes thresholds adjusted \\(p\\)-value \\(< 0.05\\) \\(logFC > 1\\).","code":"\n#\n# (1) DUX4-induced: DOX_pulse vs. untreated\n#\nrna_S1 <- rse_cds_mRNA[, rse_cds_mRNA$treatment %in% c(\"untreated\", \"DOX_pulse\")]\nrna_S1 <- rna_S1[rowSums(assays(rna_S1)[[\"counts\"]]) >= 12] \nrna_S1$treatment <- factor(rna_S1$treatment, levels=c(\"untreated\", \"DOX_pulse\"))\ndds_rna_S1 <- DESeqDataSet(rna_S1, design = ~ treatment)\ndds_rna_S1 <- estimateSizeFactors(dds_rna_S1)\ndds_rna_S1 <- DESeq(dds_rna_S1)\n\n# DUX4_induced with lfc > 1 and padj < 0.05\nDUX4_induced_v2 <- results(dds_rna_S1, alpha=0.05, tidy=TRUE) %>%\n  dplyr::filter(padj < 0.05, log2FoldChange > 1 ) %>%\n  dplyr::arrange(padj) %>%\n  dplyr::rename(ensembl=\"row\") %>%\n  dplyr::mutate(gene_name=rowData(dds_rna_S1[ensembl])$gene_name,\n                gene_type=rowData(dds_rna_S1[ensembl])$gene_type, .before=2) %>%\n  dplyr::mutate(status=if_else(log2FoldChange > 1, \"up\", \"down\")) %>%\n  dplyr::left_join(cnt, by=\"ensembl\")\nsave(DUX4_induced_v2, file=file.path(pkg_dir, \"data\", \"DUX4_induced_v2.rda\"))\n#\n# (2) S2 - IFNg induced: IFNg vs. untreated\n#\nrna_S2 <- rse_cds_mRNA[, rse_cds_mRNA$treatment %in% c(\"untreated\", \"IFNg\")]\nrna_S2 <- rna_S2[rowSums(assays(rna_S2)[[\"counts\"]]) >= 12] \nrna_S2$treatement <- factor(rna_S2$treatment, levels=c(\"untreated\", \"IFNg\"))\ndds_rna_S2 <- DESeqDataSet(rna_S2, design = ~ treatment)\ndds_rna_S2 <- estimateSizeFactors(dds_rna_S2)\ndds_rna_S2 <- DESeq(dds_rna_S2)\n\nIFNg_induced_v2 <- results(dds_rna_S2, alpha=0.05, tidy=TRUE) %>%\n  dplyr::filter(padj < 0.05, log2FoldChange > 1 ) %>%\n  dplyr::arrange(padj) %>%\n  dplyr::rename(ensembl=\"row\") %>%\n  dplyr::mutate(gene_name=rowData(dds_rna_S6[ensembl])$gene_name,\n                gene_type=rowData(dds_rna_S6[ensembl])$gene_type,\n                .before=2) %>%\n  dplyr::mutate(counts=counts(dds_rna_S6[ensembl], normalized=TRUE))  \nsave(IFNg_induced_v2, file=file.path(pkg_dir, \"data\",\n                                     \"IFNg_induced_v2.rda\"))"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
