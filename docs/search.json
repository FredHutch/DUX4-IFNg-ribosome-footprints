[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book provides detailed descriptions R code intended facilitate transparency reproducibility ribosome footprint profiling related analysis publication: DUX4 orchestrates translational reprograming broadly suppressing translation.","code":""},{"path":"index.html","id":"samples-and-treatments","chapter":"1 About","heading":"1.1 Samples and treatments","text":"total 12 samples prepared RNA-seq Ribo-seq, seperately, comprising four distinct treatments: untreated, DUX4-pulse, IFN-gamma, DUX4-pulse+INF-gamma, triplicates treatment. processed data profilings reside repository’s data directory.","code":""},{"path":"index.html","id":"softwear-requirement","chapter":"1 About","heading":"1.2 Softwear requirement","text":"R (>=4.0.3): tidyverse project, knitr, bookdown, rmarkdownBioconductor: DESeq2, goseq, GenomicAlignment, GenomicFeature, ribosomeProfilingQC, etc.","code":""},{"path":"index.html","id":"data","chapter":"1 About","heading":"1.3 data","text":"data directory repository contains processed data sets used analyses:ribosome footprintsdds_cds_by_gene.rda: DESeqDataSet instance containing p-site profiling CDS regions metadata, including size factor treatmentsrse_[5UTR_1stExon|3UTR|TSS|1st_exon]_by_tx.rda: RangedSummarisedExperiment instances containing metadata transcript-based p-site profiling different genomic features, including 5’UTR+1st exons, 13 nt /downstream transcription sites, 1st exons, 3’ UTR regions. Note size factors inherited CDS-based profiling instance dds_cds_by_datamRNA profiling:rse_cds_mRNA.rda: list RangedSummarixedExperiment instances containing mRNA counts (mRNA) gene-based CDS along sizeFactors metadata.rse_[5UTR_1stExon|3UTR|TSS|1st_exon]_by_tx_mRNA.rda: lists RangedSummarisedExperiment instances containing transcript-based mRNA counts (mRNA) different genomic features, including 5’UTR+1st exons, 13 nt /downstream transcription sites, 1st exons, 3’ UTR regions. Note analyses project, sizeFactors transcript-based mRNA counts inherited CDS-based profiling instance rse_cds_mRNAMISC:DUX4_induced_v2.rda: DUX4 induced genesIFNg_induced_v2.rda: IFN_gamma induced genes","code":""},{"path":"index.html","id":"annotation","chapter":"1 About","heading":"1.4 Annotation","text":"collected annotation Gencode version 35 made Bioconductor-based TxDb package.","code":""},{"path":"index.html","id":"make-txdb-annotation-package-for-gencode-v35","chapter":"1 About","heading":"1.4.1 Make TxDb annotation package for gencode v35","text":"code chunk demonstrates create customized TxDB package form GTF file, specifically called hg38.HomoSapiens.Gencode.v35, tailored bioinformatics analysis.steps include:Transform downloaded Gencode v35 GTF file GRange instanceConvert GRange instance TxDB package(Optional) Include gene annotation (gene_name, gene_type, gene_ID, gene_type) DataFrame instance data folder package. step necessary building Ensembl DB package (EnsDb)","code":"\nlibrary(rtracklayer)\nlibrary(GenomicFeatures)\n\n## Define the destination and package name of your TxDB package\npkg_name <- \"hg38.HomoSapiens.Gencode.v35\"\ndest_dir <- \"/fh/fast/tapscott_s/CompBio/hg38\"\n\n## Where is my GTF file\ngtf_file <- \"/fh/fast/tapscott_s/CompBio/genome_reference/GRCh38/Annotation/gencode.v35.annotation.gtf\"\n\n## Import the GTF file into a GRange instance\ngencode <- rtracklayer::import.gff(gtf_file)\n\n## Define metadata: version, source, and etc.\norganism <- \"human\"\nrelease <- \"v35\"\ndataSource <- paste0(\"ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_\",\n                     organism, \"/\", release)\nmetadata <- data.frame(\n  name=c(\"Organism\", \"Resource URL\", \"Resource GTF file\",\n         \"Taxonomy ID\", \"miRBase build ID\", \"Data source\"),\n  value=c(\"Homo sapiens\", dataSource, gtf_file, NA, NA, dataSource))\n\n## Prepare the metadata\nmetadata <- GenomicFeatures:::.prepareGFFMetadata(gtf_file, dataSource,\n                                                  organism=\"Homo sapiens\")\n\n## Combine the GRange instance and metadata into a TxDB instance\ntxdb <- GenomicFeatures:::makeTxDbFromGRanges(gr=gencode,\n                                              metadata=metadata)\n\n## Build a TxDb package\nmakeTxDbPackage(txdb, version=\"4.2.2\", author=\"Chao-Jen Wong\",\n                pkgname=pkg_name, destDir=dest_dir, license=\"Artistic-2.0\",\n                provider=\"Gencode\", providerVersion=release,\n                maintainer=\"Chao-Jen Wong <cwon2@fredhutch.org>\")"},{"path":"index.html","id":"build-ensdb-package-using-annotationhub","chapter":"1 About","heading":"1.4.2 Build EnsDb package using AnnotationHub","text":"retrospect, use AnnotationHub() GenomicFeatures::makeEnsembldbPackage() make EnsDB package instead TxDB EnsDB slots/functions retrieve gene information. example:","code":"\n#'\n#' EnsDb.Hsapiens.v92: \n#'\nlibrary(AnnotationHub)\nlibrary(GenomicFeatures)\nah <- AnnotationHub()\nquery(ah, c(\"hsapiens\"))\nedb <- ah[[\"AH60977\"]]\nseqlevelsStyle(edb) <- \"NCBI\"\nmakeEnsembldbPackage(ensdb=dbfile(dbconn(edb)), version=\"1.0.0\",\n                     maintainer=\"Chao-Jen Wong <cwon2@fredhutch.org>\",\n                     author=\"Chao-Jen Wong\",\n                     destDir=\"/fh/fast//tapscott_s/CompBio/hg38\")"},{"path":"index.html","id":"additional-scripts","chapter":"1 About","heading":"1.5 Additional scripts","text":"scripts directory contains R code shell scripts performing preprocessing bioinformatics analysis manuscripts.","code":""},{"path":"preprocessing.html","id":"preprocessing","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2 Preprocessing Ribosome footprints sequencing data","text":"script performs preprocessing ribo-seq data. lists sections shell script preprocessing steps:Software:FastQC/0.11.9-Java-11cutadapt/2.7-GCCcore-8.3.0-Python-3.7.4Bowtie2/2.4.1-GCCcore-8.3.0SAMtools/1.10-GCCcore-8.3.0STAR/2.7.6a-foss-2019b","code":""},{"path":"preprocessing.html","id":"adapter-trimming","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.1 Adapter trimming","text":"Trimming forward 3’ adapter TGGAATTCTCGGGTGCCAAGG removing 4 bases front end trimming:-O 13 minimum overlap adapter match, 13 computed 9 plus 4 (9 minimum overlap 4 length unknown section). specify , adapter sequence match end every read (N matches anything), ten bases removed every read.step yielded reads 25 - 29 nt length.","code":"# for forward read, trim 3' adapter TGGAATTCTCGGGTGCCAAGG \ncutadapt --cores=4 -O 13 -a N{4}TGGAATTCTCGGGTGCCAAGG \\\n  -u 4 -m 25 \\\n  --untrimmed-output ${sample_name}_R1_untrimmed.fastq.gz \\ \n  -o ${sample_name}_R1_trimmed.fastq.gz \\\n  $fq1 > ${sample_name}_cutadapt_log.txt\n  \nfq=$trim_dir/${sample_name}_R1_trimmed.fastq.gz  "},{"path":"preprocessing.html","id":"remove-rrna-and-non-rrna-contamination-using-bowtie2","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.2 Remove rRNA and non-rRNA contamination using Bowtie2","text":"first used RNA central database identify rRNA sequences built rRNA reference genome rRNA_ref. Second, used GFF Gencode v35 extract small RNA (tRNA, snoRNA, sRNA, microRNA, etc) sequences customized reference genome rsoRNA_ref. used bowtie2 align trimmed reads rRNA reference genome. Next, took un-mapped aligned small RNA reference sequence. final un-mapped reads interest.","code":"# rRNA filter\nbowtie2 --seed=123 --threads=32 -x $rRNA_ref -U $fq -S ${sample_name}_R1.rRNA.sam \\\n  --un-gz=${sample_name}_R1_rFiltered.fq.gz \\\n  > ${sample_name}_R1_rRNA.bowtie2.log 2> ${sample_name}_R1_rRNA.bowtie2.log2\n# tRNA and snoRNA filter\nbowtie2 --seed=123 --threads=32 -x $tsoRNA_ref \\\n  -U ${sample_name}_R1_rFiltered.fq.gz \\\n  -S ${sample_name}_R1.tsoRNA.sam \\\n  --un-gz=${sample_name}_R1_rtsFiltered.fq.gz \\\n  > ${sample_name}_R1_tsoRNA.bowtie2.log 2>   ${sample_name}_R1_tsoRNA.bowtie2.log2"},{"path":"preprocessing.html","id":"alignment","chapter":"2 Preprocessing Ribosome footprints sequencing data","heading":"2.3 Alignment","text":"took final un-mapped reads previous step aligned GRCh38.p13 STAR:See next chapter Ribo-seq specific quality control.","code":"STAR --runThreadN 4 --outSAMattributes NH HI NM MD AS nM jM jI XS \\\n  --genomeDir $star_index \\\n  --readFilesIn $filtered_dir/${sample_name}_R1_rtsFiltered.fq.gz \\\n  --outFileNamePrefix $bam_dir/${sample_name}_ \\\n  --sjdbOverhang 25 \\\n  --outFilterScoreMinOverLread 0 \\ \n  --outFilterMatchNminOverLread 0 \\\n  --outFilterMatchNmin 20 \\\n  --readFilesCommand zcat \\\n  --outSAMtype BAM SortedByCoordinate\n\nsamtools index $bam_dir/${sample_name}_Aligned.sortedByCoord.out.bam"},{"path":"rpfs-qc.html","id":"rpfs-qc","chapter":"3 Ribosome footprints quality control","heading":"3 Ribosome footprints quality control","text":"chapter, assessed quality ribosome footprints (RPFs) several aspects using Bioconductor’s ribosomeProfilingQC package -hoouse ad-hoc functions. aspects include:size RPFs: calculating size distribution RPFs, confirming RPFs congruent actual size ribosomes (26 - 29 nt)TSS -set enrichment: visualizing distance 5’ end reads start codon decide best -set p-sitesp-sites reading frames: estimating p-sites coordinates RPFs dominant length (26 - 29 nt) ensuring p-sites -frame around start codontrinucleotide periodicity transcripts: constructing meta-gene p-sites coverage plot, colored reading frames, show trinucleotide footprint periodicity 5’ UTR, CDS, 3’ UTRAfter ensuring quality RPFs p-sites, profiled PRFs counting p-sites different genomic features including 5’ UTR, CDS, 3’ UTR.main script performed RPFs QC . Note include BAM files repository. Since code chunks chapter involve BAM files therefore evaluated. means figures section pre-generated.","code":""},{"path":"rpfs-qc.html","id":"preparation","chapter":"3 Ribosome footprints quality control","heading":"3.1 Preparation","text":"code chunk loads libraries:Building sample information:","code":"\nlibrary(ribosomeProfilingQC)\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(Rsamtools)\nlibrary(GenomicFeatures)\nlibrary(GenomicAlignments)\nlibrary(hg38.HomoSapiens.Gencode.v35)\ntxdb <- hg38.HomoSapiens.Gencode.v35\nlibrary(BSgenome.Hsapiens.UCSC.hg38)\ngenome <- BSgenome.Hsapiens.UCSC.hg38\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 4L)\nregister(bp_param, default=TRUE)\n\npkg_dir <- \"/fh/fast/tapscott_s/CompBio/Ribo-seq/hg38.DUX4.IFN.ribofootprint.2\"\nscratch_dir <- \"/fh/scratch/delete90/tapscott_s/hg38.DUX4.IFN.ribofootprint.R1\"\nfig_dir <- file.path(pkg_dir, \"figures\", \"QC\")\nsource(file.path(pkg_dir, \"scripts\", \"tools.R\"))\nsource(file.path(pkg_dir, \"scripts\", \"fork_readsEndPlot.R\"))\nbam_dir <- file.path(scratch_dir, \"bam\", \"merged_bam_runs\")\nbam_files <- list.files(bam_dir, pattern=\".bam$\", full.names=TRUE)\nsample_info <- data.frame(\n  bam_files = bam_files <- list.files(bam_dir, pattern=\".bam$\", full.names=TRUE)) %>%\n    dplyr::mutate(sample_name = str_replace(basename(bam_files),\n                                            \".bam\", \"\"),\n                  treatment = str_replace(str_sub(sample_name, start=1L, end=-3L), \"[^_]+_\", \"\")) %>%\n    dplyr::mutate(treatment = factor(treatment, levels=c(\"untreated\", \"DOX-pulse\", \"IFNg\", \"DOX-pulse_IFNg\")))"},{"path":"rpfs-qc.html","id":"esitmate-the-optimal-read-lengths","chapter":"3 Ribosome footprints quality control","heading":"3.2 Esitmate the optimal read lengths","text":"code chunk uses ribosomePrfilingQC package get length RPFs reveals optimal read lengths. Fig 3.1 shows dominated RPF segment size ranges 26 29 nt.\nFigure 3.1: Distribution size RPF segments\n","code":"\n# (a) read length frequency\nread_length_freq <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  p_site <- estimatePsite(bam_file, CDS, genome)\n  pc <- getPsiteCoordinates(bam_file, bestpsite = p_site)\n  read_length_freq <- summaryReadsLength(pc, widthRange = c(25:39), plot=FALSE)\n})\nnames(read_length_freq) <- sample_info$sample_name\n\n# (b) tidy data\nlength_freq <- map_dfr(names(read_length_freq), function(x) {\n  as.data.frame(read_length_freq[[x]]) %>%\n    dplyr::rename(length=\"Var1\") %>%\n    add_column(sample_name=x) %>%\n    dplyr::mutate(order = as.numeric(length)) %>%\n    dplyr::mutate(length = as.numeric(as.character(length)))\n}) %>%\n  left_join(dplyr::select(sample_info, sample_name, treatment),\n            by=\"sample_name\") %>%\n  dplyr::arrange(treatment) %>%\n  dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n\n# (c) plot\nggplot(length_freq, aes(x=length, y=Freq)) +\n  geom_bar(stat=\"identity\", width=0.7) +\n  theme_bw() +\n  facet_wrap( ~ sample_name, nrow=4) +\n  labs(x=\"Read length\", y=\"Frequency\")\nggsave(file.path(fig_dir, \"freqment_size_frequency.pdf\"))\nknitr::include_graphics(\"images/freqment_size_frequency.pdf\")"},{"path":"rpfs-qc.html","id":"distance-from-5-end-of-reads-to-the-start-codon","chapter":"3 Ribosome footprints quality control","heading":"3.3 Distance from 5’ end of reads to the start codon","text":"distance 5’ end reads start codon CDS can help determine best position p-sites. Figure 3.2, 5’ end reads enriched 13 position upstream start codon. means best p-sites located 13th nucleotide RPF segment lots ribosome docking translation start sites.Note ribosomeProfilingQC::readsEndPlot() function meant make plot; however, function flaw fails reverse mapping genes negative strand. forked function collected mistake. (Later fork pakcage make available github, meanwhile, using fork_readsEndPlot scripts/fork_readsEndPlot.R).Code chunk tool tidy distance data.Restricting read length 26 29 nt, code estimates pileup 5’ end reads 30 position /-stream start codon:\nFigure 3.2: Distance 5 prime end reads start codon reveals best position p-site: 13 nucleotide shift\n","code":"\n.tidy_dist_data <- function(dist_list) {\n  dist <- map_dfr(names(dist_list), function(x) {\n    as.data.frame(dist_list[[x]]) %>%\n    dplyr::rename(counts = `dist_list[[x]]`) %>%\n    tibble::rownames_to_column(var = \"dist\") %>%\n    tibble::add_column(sample_name = x) %>%\n    dplyr::mutate(dist = factor(dist, levels=dist)) \n  }) %>%\n    dplyr::left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n    dplyr::arrange(treatment) %>%\n    dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n}\nread_length <- c(26:29)\n# (a) distance to start codon [-29, 30]\nstart_codon_30 <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  fork_readsEndPlot(bam_file, CDS, toStartCodon=TRUE, readLen=read_length, window=c(-29, 30))\n  #ribosomeProfilingQC::readsEndPlot(bam_file, CDS_pos, toStartCodon=TRUE, readLen=read_length,\n  #             window= c(-29, 30))\n})\nnames(start_codon_30) <- sample_info$sample_name\n\n# (b) tidy data and hist (bar)\n.tidy_dist_data <- function(dist_list) {\n  dist <- map_dfr(names(dist_list), function(x) {\n    as.data.frame(dist_list[[x]]) %>%\n    dplyr::rename(counts = `dist_list[[x]]`) %>%\n    tibble::rownames_to_column(var = \"dist\") %>%\n    tibble::add_column(sample_name = x) %>%\n    dplyr::mutate(dist = factor(dist, levels=dist)) \n  }) %>%\n    dplyr::left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n    dplyr::arrange(treatment) %>%\n    dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n}\n\ndist <- .tidy_dist_data(start_codon_30)\nggplot(dist, aes(x=dist, y=counts)) +\n  geom_bar(stat=\"identity\", width=0.7) +\n  theme_bw() +\n  labs(x=\"Distance from 5' end of reads to start codon\", y=\"counts\") +\n  facet_wrap( ~ sample_name, nrow=4, scale=\"free\") +\n  geom_vline(xintercept = which(dist$dist == 1),\n             linetype=\"dashed\", alpha=0.3, show.legend=FALSE) +\n  theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust=0.5, size=4),\n        panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),\n        panel.background = element_blank())\nggsave(file.path(fig_dir, \"distance_from_5end_to_start_codon_30-fork-readsEndPlot.pdf\"))#, width=8, height=6)\nknitr::include_graphics(\"images/distance_from_5end_to_start_codon_30-fork-readsEndPlot.pdf\")"},{"path":"rpfs-qc.html","id":"p-sites-and-reading-frames","chapter":"3 Ribosome footprints quality control","heading":"3.4 P-sites and reading frames","text":"use ribosomeProfilingQC::getPsiteCoordinates() ribosomeProfilingQC::assigneReadingFrame() get p-sites coordinates assign reading frames within annotated CDS. plotted p-sites around translation start sites colored reading frames. Figure 3.3 ensures p-sites correct -frame start codon.\nFigure 3.3: Reading frames p-sites annotated CDS around start codon\n","code":"\nreading_frame <- bplapply(sample_info$bam_files, function(x) {\n  bam_file <- BamFile(x)\n  p_site <- estimatePsite(bam_file, CDS, genome) # 13\n  pc <- getPsiteCoordinates(bam_file, bestpsite = p_site)\n  pc_sub <- pc[pc$qwidth %in% read_length]\n  pc_sub <- assignReadingFrame(pc_sub, CDS)\n  distance <- plotDistance2Codon(pc_sub)\n})\n\nnames(reading_frame) <- sample_info$sample_name\n\n# tidy reading_frame tool\n.tidy_reading_frame <- function(rf_list) {\n  rf <- map_dfr(names(rf_list), function(x) {\n    rf_list[[x]] %>% as.data.frame(stringsAsFactors=FALSE) %>%\n      dplyr::rename(index=\"Var1\", Frequency=\"Freq\") %>%\n      dplyr::mutate(index=as.numeric(index), Frequency=as.numeric(Frequency)) %>%\n      dplyr::mutate(frame = as.factor(index %% 3)) %>%\n      add_column(sample_name = x)\n  })\n}  \n\n# ggplot\ntidy_rf <- .tidy_reading_frame(reading_frame) %>%\n  left_join(dplyr::select(sample_info, sample_name, treatment), by=\"sample_name\") %>%\n  dplyr::arrange(treatment) %>%\n  dplyr::mutate(sample_name = factor(sample_name, levels=unique(sample_name)))\n\nggplot(tidy_rf, aes(x=index, y=Frequency, fill=frame)) +\n    geom_bar(stat=\"identity\", width=0.7) +\n    theme_minimal() +\n    facet_wrap( ~ sample_name, nrow=4, scale=\"free\") +\n    theme(legend.position=c(0.25, 0.93), legend.key.size = unit(0.3, 'cm'), \n          axis.text.x=element_text(size=5), panel.grid.major = element_blank()) +\n    labs(x=\"P site relative to start codon\", y=\"counts\") +\n    scale_x_continuous(breaks=seq(0, 50, 3)) +\n    scale_fill_brewer(palette=\"Dark2\")\nggsave(file.path(fig_dir, \"reading_frame_psite_to_start_codon.pdf\"), width=8, height=6)   \nknitr::include_graphics(\"images/reading_frame_psite_to_start_codon.pdf\")"},{"path":"rpfs-qc.html","id":"trinucleotide-periodicity-on-transcripts","chapter":"3 Ribosome footprints quality control","heading":"3.5 Trinucleotide periodicity on transcripts","text":", constructed reading frame frequency plot meta-gene plot p-sites coverage, colored reading frames, annotated 5’ UTR, CDS, 3’ UTR regions. Figure 3.4 Figure 3.5 confirmed (1) enriched RPFs docked translation start sties, (2) trinucleotide footprint periodicity occurred CDS.ribosomeProfilingQC::assigneReadingFrame() function assigns reading frames p-sites annotated CDS, wrote tools assign reading frame p-sites exclusively lay annotated UTR regions. Giving overview trinucleotide periodicity whole transcripts script constructed meta-gene p-sites coverage 5’ UTR, CDS, 3’ UTR regions, shown Figure 3.5.\nFigure 3.4: Reading frame frequency 5 prime UTR, CDS, 3 prime UTR\n\nFigure 3.5: Meta-gene p-sites coverage\n","code":"\nknitr::include_graphics(\"images/frame_frequency_by_regions_average_over_treatment.pdf\")\nknitr::include_graphics(\"images/reading_frame_periodicity_by_treatment_norm.pdf\")"},{"path":"profiling.html","id":"profiling","chapter":"4 P-sites profiling on genomic features","heading":"4 P-sites profiling on genomic features","text":"chapter, used ribosomeProfilingQC::getPsiteCoordinates() get p-sites coordinates. Due large size, p-sites dataset included repo. However, include p-sites profiling gene-based CDS transcripts-based genomic features 5’ UTR, 13 nts /downstream translation start site, 1st exon, 3’ UTR, saved DESeqDatSet instances.Code chunk loads libraries defines local tools:","code":"\nlibrary(DESeq2)\nlibrary(GenomicAlignments)\nlibrary(hg38.HomoSapiens.Gencode.v35)\ndata(gene.anno)\ntxdb <- hg38.HomoSapiens.Gencode.v35\n\n\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 12L)\nregister(bp_param, default=TRUE)\n\ncds_by_gene <- cdsBy(txdb, by=\"gene\")\nignore.strand <- FALSE\n\n#\n# tools\n#\n.get_col_row_data <- function(rse, txdb, dds_cds_by_gene) {\n  # colnames and append sample_info\n  colnames(rse) <- colnames(dds_cds_by_gene)\n  colData(rse) <- colData(dds_cds_by_gene)\n  # rowData: tx_name -> gene_id, gene_name, gene_type\n  tx_name <- rownames(rse)\n  df <- AnnotationDbi::select(txdb, keys=tx_name, columns=\"GENEID\", \n                              keytype=\"TXNAME\",\n                              multiVals=\"first\") %>% \n    as.data.frame() %>%\n    dplyr::distinct(TXNAME, .keep_all=TRUE) %>%\n    dplyr::rename(tx_name=TXNAME, gene_id=GENEID) %>%\n    dplyr::left_join(as.data.frame(gene.anno), by=\"gene_id\") %>%\n    dplyr::select(tx_name, gene_id, gene_type, gene_name, hgnc_id)                       \n  rownames(df) <- df$tx_name\n  rowData(rse) <- df[rownames(rse), ]\n  \n  return(rse)\n}"},{"path":"profiling.html","id":"define-genomic-features","chapter":"4 P-sites profiling on genomic features","heading":"4.1 Define genomic features","text":"Code chunk defines annotated transcript-based genomic features 5’UTR, 13 nts /downstream translation start sites, first exons, 3’ UTR; features kept unique.","code":"\n#\n# define features\n#\nfeature_5p  <- fiveUTRsByTranscript(txdb, use.name=TRUE)\nfeature_3p  <- threeUTRsByTranscript(txdb, use.name=TRUE)\nfeature_cds <- cdsBy(txdb, by=\"tx\", use.name=TRUE)\n\n# ensure to just include unique UTRs\n.unique_UTRs <- function(utrs) {\n    # exclude UTRs that are not unique\n    exons_names_by_tx <- bplapply(utrs, function(gr)\n      paste(gr$exon_name, collapse=\",\"))\n    keep_tx <- as.data.frame(unlist(exons_names_by_tx)) %>%\n      rownames_to_column(var=\"tx_name\") %>%\n      dplyr::rename(exons_names=`unlist(exons_names_by_tx)`) %>%\n      dplyr::distinct(exons_names, .keep_all=TRUE)\n    utrs[keep_tx$tx_name]                 \n}\n\nunique_feature_5p <- .unique_UTRs(utrs=feature_5p)\nunique_feature_3p <- .unique_UTRs(utrs=feature_3p)\n\n# first coding exon and TSS [-13, 13]\nfirst_exon_per_tx <- bplapply(feature_cds, function(gr) {\n  st <- as.character(strand(gr[1]))\n  if (st %in% c(\"+\", \"*\")) x <- gr[1]\n  if (st == \"-\") x <- gr[length(gr)]\n  return(x)\n})\nfirst_exon_per_tx <- GRangesList(first_exon_per_tx)\n\n.distinct_ranges <- function(gr) { # keeping distinct 1st coding exons only\n    mcols(gr)$rng <- as.character(gr)\n    gr_mcols <- as.data.frame(mcols(gr)) %>% dplyr::distinct(rng)\n    gr <- gr[names(gr) %in% rownames(gr_mcols)]\n}\n\n\nfirst_exon <- .distinct_ranges(unlist(first_exon_per_tx))\n#around_TSS <- promoters(first_exon, upstream=2, downstream=3)\naround_TSS <- promoters(first_exon, upstream=13, downstream=14) # 27 nucleotides, 13 up/downstream of TSS\n\ntx_based_features <- list(feature_5p=unique_feature_5p, \n                          feature_3p = unique_feature_3p,\n                          first_exon = first_exon, \n                          around_TSS = around_TSS)\nsave(tx_based_features, file=file.path(pkg_dir, \"data\", \"tx_based_features.rda\"))     "},{"path":"profiling.html","id":"get-p-sites-coordinates","chapter":"4 P-sites profiling on genomic features","heading":"4.2 Get p-sites coordinates","text":"kept footprints dominant lengths 26 29 used previously-defined offset 13 get p-sites coordinates ribosome footprints, using ribosomeProfilingQC::getPsiteCoordinates().","code":"\nignore.strand <- FALSE\nyieldSize <- 1e+07\nbest_p_site <- 13\nreads_len <- c(26:29)\nanchor <- \"5end\"\n\n# (a) get p site coordinates (we load from )\nreads <- bplapply(sample_info$bam_files, function(f) {\n  bam_file <- BamFile(file = f)\n  pc <- getPsiteCoordinates(bam_file, bestpsite = best_p_site,\n                            anchor = anchor)\n  pc.sub <- pc[pc$qwidth %in% reads_len]\n})\nnames(reads) <- sample_info$sample_name\np_sites <- reads\nsave(p_sites, file=file.path(pkg_dir, \"data\", \"p_sites.rda\"))"},{"path":"profiling.html","id":"profiling-on-cds","chapter":"4 P-sites profiling on genomic features","heading":"4.2.1 Profiling on CDS","text":"Use GenomicAlignments::summarizeOverlaps() count p-sites CDS save DESeqDataSet size factor estimated DESeq2. size factor also used normalize counts transcript-based genomic features.","code":"\n# profiling\nrse_cds_by_gene <- bplapply(reads, function(pc) {\n  summarizeOverlaps(features=cds_by_gene, \n                    reads=pc, \n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_cds_by_gene <- do.call(cbind, rse_cds_by_gene)\n\n# tidy colData and rowData\ncolnames(rse_cds_by_gene) <- sample_info$sample_name\ncolData(rse_cds_by_gene) <- append(colData(rse_cds_by_gene), \n                                   as(sample_info, \"DataFrame\"))\nrowData(rse_cds_by_gene) <- gene.anno[rownames(rse_cds_by_gene), \n                                      c(\"gene_id\", \"gene_type\",\n                                        \"gene_name\", \"hgnc_id\")]\n# dds\ndds_cds_by_gene <- \n  DESeqDataSet(rse_cds_by_gene, design = ~treatment) # loose filtering             \ndds_cds_by_gene <- \n  dds_cds_by_gene[rowSums(counts(dds_cds_by_gene)) > 12]\ndds_cds_by_gene <- estimateSizeFactors(dds_cds_by_gene)\nsave(dds_cds_by_gene, file=file.path(pkg_dir, \"data\",\n                                    \"dds_cds_by_gene.rda\"))"},{"path":"profiling.html","id":"profiling-on-other-genomic-features","chapter":"4 P-sites profiling on genomic features","heading":"4.2.2 Profiling on other genomic features","text":"Profiling near translation start site [-13, 13]:","code":"\nload(file.path(pkg_dir, \"data\", \"p_sites.rda\")) # same as \"reads\" made previously\nload(file.path(pkg_dir, \"data\", \"dds_cds_by_gene.rda\")) # need the sizeFactor and column data\nload(file.path(pkg_dir, \"data\", \"tx_based_features.rda\")) # 5'UTR/TSS/1stExon/3'UTR\naround_TSS <- tx_based_features$around_TSS\nfeature_5p <- tx_based_features$feature_5p\nfeature_3p <- tx_based_features$feature_3p\nfirst_exon <- tx_based_features$first_exon\nfeature_cds <- cdsBy(txdb, by=\"tx\", use.name=TRUE)\nignore.strand <- FALSE\ninter.feature <- FALSE\n\nrse_TSS_by_tx <- bplapply(p_sites, function(pc) {\n    summarizeOverlaps(features=around_TSS, \n                      reads=pc, \n                      inter.feature=FALSE,\n                      ignore.strand=ignore.strand)\n})\nrse_TSS_by_tx <- do.call(cbind, rse_TSS_by_tx)\nrse_TSS_by_tx <- .get_col_row_data(rse_TSS_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\n\nsave(rse_TSS_by_tx, file=file.path(pkg_dir, \"data\", \"rse_TSS_by_tx.rda\")) \n# profile 5' UTR\nrse_5UTR_by_tx <- bplapply(p_sites, function(pc) {\n  summarizeOverlaps(features=feature_5p, \n                    reads=pc, \n                    singleEnd=TRUE,\n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_5UTR_by_tx <- do.call(cbind, rse_5UTR_by_tx)\nrse_5UTR_by_tx <- .get_col_row_data(rse_5UTR_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\nsave(rse_5UTR_by_tx, file=file.path(pkg_dir, \"data\", \"rse_5UTR_by_tx.rda\"))\n# profile on 1st exon\nrse_1st_exon_by_tx <- bplapply(p_sites, function(pc) {\n    summarizeOverlaps(features=first_exon, \n                    reads=pc, \n                    inter.feature=FALSE,\n                    ignore.strand=FALSE)\n})\nrse_1st_exon_by_tx <- do.call(cbind, rse_1st_exon_by_tx)\nrse_1st_exon_by_tx <- .get_col_row_data(rse=rse_1st_exon_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)      \nsave(rse_1st_exon_by_tx, file=file.path(pkg_dir, \"data\", \"rse_1st_exon_by_tx.rda\")) \n# profile by 3UTR\nrse_3UTR_by_tx <- bplapply(p_sites, function(pc) {\n  summarizeOverlaps(features=feature_3p, \n                    reads=pc, \n                    singleEnd=TRUE,\n                    inter.feature=FALSE,\n                    ignore.strand=ignore.strand)\n})\nrse_3UTR_by_tx <- do.call(cbind, rse_3UTR_by_tx)\nrse_3UTR_by_tx <- .get_col_row_data(rse_3UTR_by_tx, dds_cds_by_gene=dds_cds_by_gene, txdb=txdb)\nsave(rse_3UTR_by_tx, file=file.path(pkg_dir, \"data\", \"rse_3UTR_by_tx.rda\"))"},{"path":"mRNA.html","id":"mRNA","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5 mRNA profiling and DUX4/IFNg induced genes","text":"chapter, performed mRNA profiling different genomic features identified DUX4 \\(IFN_{\\gamma}\\) induced genes. Bioconductor packages, including GenomicAlignments DESeq along custom build annotation TxDB package hg38.HomoSapiens.Gencode.v35, used gene counting, differential analysis, determining translation efficiency DUX4- \\(IFN_{\\gamma}\\)-induced genes.","code":""},{"path":"mRNA.html","id":"mrna-profiling","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.1 mRNA profiling","text":"Similar RPFs profiling, used GenomicAlignments::summarizedOverlaps() perform gene counting gene-based features, CDS exons, transcript-based features, including 5’ UTR, around translation start site ([-13, 13]), first exon, 3’ TUR.Note mRNA profiling involved BAM files therefore results (DESeqDataSeq instance) code generated fly.","code":""},{"path":"mRNA.html","id":"libraries-parameters-and-tools","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.2 libraries, parameters, and tools","text":"Code chunk belows load libraries defines sample info meta data.","code":"\nlibrary(hg38.HomoSapiens.Gencode.v35)\ndata(gene.anno)\ntxdb <- hg38.HomoSapiens.Gencode.v35\nlibrary(GenomicAlignments)\nlibrary(tidyverse)\n\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 12L)\nregister(bp_param, default=TRUE)\n\n#\n# Define parameters and sample info\n#\npkg_dir <- \"/fh/fast/tapscott_s/CompBio/Ribo-seq/hg38.DUX4.IFN.ribofootprint.2\"\nrna_bam_dir <- \"/fh/fast/tapscott_s/CompBio/dchamm/DCH_Paired_RiboSeq_RNA-Seq_BAM_files\"\n\nsample_info <- data.frame(\n  bam_files = bam_files <- list.files(rna_bam_dir, pattern=\".bam$\", \n                                      full.names=TRUE)) %>%\n    dplyr::mutate(sample_name = str_replace(basename(bam_files),\n                                            \".bam\", \"\"),\n                  treatment = str_replace(str_sub(sample_name,\n                                                  start=1L, end=-3L),\n                                          \"[^_]+_\", \"\")) %>%\n    dplyr::mutate(treatment = str_replace(treatment, \"-\", \"_\")) %>%\n    dplyr::mutate(treatment = recode(treatment, Untreated=\"untreated\")) %>%\n    dplyr::mutate(treatment = factor(treatment, \n                                     levels=c(\"untreated\",\n                                              \"DOX_pulse\", \"IFNg\",\n                                              \"DOX_pulse_IFNg\")))\nrownames(sample_info) <- sample_info$sample_name \n\n#\n# tools for tx_name\n#\n.get_row_data_txname <- function(rse, txdb) {\n  tx_name <- rownames(rse)\n  df <- AnnotationDbi::select(txdb, keys=tx_name, columns=\"GENEID\", keytype=\"TXNAME\",\n                              multiVals=\"first\") %>% as.data.frame() %>%\n    dplyr::distinct(TXNAME, .keep_all=TRUE) %>%\n    dplyr::rename(tx_name=TXNAME, gene_id=GENEID) %>%\n    dplyr::left_join(as.data.frame(gene.anno), by=\"gene_id\") %>%\n    dplyr::select(tx_name, gene_id, gene_type, gene_name, hgnc_id)                       \n  rownames(df) <- df$tx_name\n  rowData(rse) <- df[rownames(rse), ]\n  \n  return(rse)\n}"},{"path":"mRNA.html","id":"gene-based-genomc-features","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.3 Gene-based genomc features","text":"Code chunks profiles mRNA gene-based genomic features CDS exons:Profiling exons genes:","code":"\n# (a) tx-based features\nload(file.path(pkg_dir, \"data\", \"tx_based_features.rda\")) # 5'UTR/TSS/1stExon/3'UTR\naround_TSS <- tx_based_features$around_TSS\nfeature_5p <- tx_based_features$feature_5p\nfeature_3p <- tx_based_features$feature_3p\nfirst_exon <- tx_based_features$first_exon\n\n# (b) gene-based features\ncds <- cdsBy(txdb, by=\"gene\")\nexons <- exonsBy(txdb, by=\"gene\")\n\n#\n# CDS expression by genes\n#\nrse_cds_mRNA <- summarizeOverlaps(features = cds, \n                                  reads=BamFileList(sample_info$bam_files),\n                                  mode = \"IntersectionStrict\",\n                                  inter.feature = TRUE,\n                                  ignore.strand=TRUE)\ncolnames(rse_cds_mRNA) <- sample_info$sample_name                                  \ncolData(rse_cds_mRNA) <- as(sample_info, \"DataFrame\")\nrowData(rse_cds_mRNA) <- gene.anno[rownames(rse_cds_mRNA),\n                                   c(\"gene_id\", \"gene_type\",\n                                     \"gene_name\", \"hgnc_id\")]\nsave(rse_cds_mRNA, file=file.path(pkg_dir, \"data\",\n                                  \"rse_cds_mRNA.rda\"))  \n#\n# exons expression by genes\n#\nrse_exons_mRNA <- summarizeOverlaps(features = exons, \n                                  reads=BamFileList(sample_info$bam_files),\n                                  mode = \"IntersectionStrict\",\n                                  inter.feature = TRUE, ignore.strand=TRUE)\ncolnames(rse_exons_mRNA) <- sample_info$sample_name                                  \ncolData(rse_exons_mRNA) <- as(sample_info, \"DataFrame\")\nrowData(rse_exons_mRNA) <- gene.anno[rownames(rse_exons_mRNA),\n                                   c(\"gene_id\", \"gene_type\",\n                                     \"gene_name\", \"hgnc_id\")]\nsave(rse_exons_mRNA, file=file.path(pkg_dir, \"data\",\n                                    \"rse_exons_mRNA.rda\"))  "},{"path":"mRNA.html","id":"profiling-transcroptome-for-transcript-based-genomic-features","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.4 Profiling transcroptome for transcript-based genomic features:","text":"Code chuck profiling fist exon transcripts:Profiling footprint 13 nts /-stream translation start sites [-13, 13]:Profiling 5’ UTR 3’ UTR:","code":"\n#\n# first exon by transcripts (tx) - inherit sizeFactor from rse_cds_mRNA; must turn off inter.feature\n#\n\nrse_1st_exon_by_tx_mRNA <- \n  summarizeOverlaps(features = first_exon, \n                    reads=BamFileList(sample_info$bam_files),\n                    mode = \"IntersectionStrict\",\n                    inter.feature = FALSE, ignore.strand=TRUE, \n                    BPPARAM=bp_param)\ncolnames(rse_1st_exon_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_1st_exon_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_1st_exon_by_tx_mRNA <- .get_row_data_txname(rse_1st_exon_by_tx_mRNA, txdb)\nsave(rse_1st_exon_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                             \"rse_1st_exon_by_tx_mRNA.rda\"))\n#\n# around TSS\n#\nrse_TSS_by_tx_mRNA <- \n    summarizeOverlaps(features = around_TSS, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_TSS_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_TSS_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_TSS_by_tx_mRNA <- .get_row_data_txname(rse_TSS_by_tx_mRNA, txdb)\nsave(rse_TSS_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                        \"rse_TSS_by_tx_mRNA.rda\"))  \n#\n# 5' UTR\n#\nrse_5UTR_by_tx_mRNA <- \n    summarizeOverlaps(features = feature_5p, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_5UTR_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_5UTR_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_5UTR_by_tx_mRNA <- .get_row_data_txname(rse_5UTR_by_tx_mRNA,\n                                            txdb)\nsave(rse_5UTR_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                         \"rse_5UTR_by_tx_mRNA.rda\"))\n#\n# 3' UTR\n#\nrse_3UTR_by_tx_mRNA <- \n    summarizeOverlaps(features = feature_3p, \n                      reads=BamFileList(sample_info$bam_files),\n                      mode = \"Union\",\n                      inter.feature = FALSE, ignore.strand=TRUE, BPPARAM=bp_param)\ncolnames(rse_3UTR_by_tx_mRNA) <- sample_info$sample_name                                  \ncolData(rse_3UTR_by_tx_mRNA) <- as(sample_info, \"DataFrame\")\nrse_3UTR_by_tx_mRNA <- .get_row_data_txname(rse_3UTR_by_tx_mRNA, txdb)\nsave(rse_3UTR_by_tx_mRNA, file=file.path(pkg_dir, \"data\",\n                                         \"rse_3UTR_by_tx_mRNA.rda\"))"},{"path":"mRNA.html","id":"dux4-induced-genes","chapter":"5 mRNA profiling and DUX4/IFNg induced genes","heading":"5.5 Define DUX4 and IFN-gamma induced genes","text":"used mRNA profiling CDS applied DESeq2 determine DUX4 \\(IFN_{\\gamma}\\) induced genes comparing \\(INF_{\\gamma}\\) DUX-pulse treatments untraated, respectively, thresholds adjusted \\(p\\)-value \\(< 0.05\\) \\(logFC > 1\\).","code":"\n#\n# (1) S1 - DUX4-induced: DOX_pulse vs. untreated\n#\nrna_S1 <- rse_cds_mRNA[, rse_cds_mRNA$treatment %in% c(\"untreated\", \"DOX_pulse\")]\nrna_S1 <- rna_S1[rowSums(assays(rna_S1)[[\"counts\"]]) >= 12] \nrna_S1$treatment <- factor(rna_S1$treatment, levels=c(\"untreated\", \"DOX_pulse\"))\ndds_rna_S1 <- DESeqDataSet(rna_S1, design = ~ treatment)\ndds_rna_S1 <- estimateSizeFactors(dds_rna_S1)\ndds_rna_S1 <- DESeq(dds_rna_S1)\n\n# thresholds: lfc > 1 and padj < 0.05\nDUX4_induced_v2 <- results(dds_rna_S1, alpha=0.05, tidy=TRUE) %>%\n  dplyr::filter(padj < 0.05, log2FoldChange > 1 ) %>%\n  dplyr::arrange(padj) %>%\n  dplyr::rename(ensembl=\"row\") %>%\n  dplyr::mutate(gene_name=rowData(dds_rna_S1[ensembl])$gene_name,\n                gene_type=rowData(dds_rna_S1[ensembl])$gene_type, .before=2) %>%\n  dplyr::mutate(status=if_else(log2FoldChange > 1, \"up\", \"down\")) %>%\n  dplyr::left_join(cnt, by=\"ensembl\")\nsave(DUX4_induced_v2, file=file.path(pkg_dir, \"data\", \"DUX4_induced_v2.rda\"))\n#\n# (2) S2 - IFNg induced: IFNg vs. untreated\n#\nrna_S2 <- rse_cds_mRNA[, rse_cds_mRNA$treatment %in% c(\"untreated\", \"IFNg\")]\nrna_S2 <- rna_S2[rowSums(assays(rna_S2)[[\"counts\"]]) >= 12] \nrna_S2$treatement <- factor(rna_S2$treatment, levels=c(\"untreated\", \"IFNg\"))\ndds_rna_S2 <- DESeqDataSet(rna_S2, design = ~ treatment)\ndds_rna_S2 <- estimateSizeFactors(dds_rna_S2)\ndds_rna_S2 <- DESeq(dds_rna_S2)\n\nIFNg_induced_v2 <- results(dds_rna_S2, alpha=0.05, tidy=TRUE) %>%\n  dplyr::filter(padj < 0.05, log2FoldChange > 1 ) %>%\n  dplyr::arrange(padj) %>%\n  dplyr::rename(ensembl=\"row\") %>%\n  dplyr::mutate(gene_name=rowData(dds_rna_S6[ensembl])$gene_name,\n                gene_type=rowData(dds_rna_S6[ensembl])$gene_type,\n                .before=2) %>%\n  dplyr::mutate(counts=counts(dds_rna_S6[ensembl], normalized=TRUE))  \nsave(IFNg_induced_v2, file=file.path(pkg_dir, \"data\",\n                                     \"IFNg_induced_v2.rda\"))"},{"path":"translation-efficiency-CDS.html","id":"translation-efficiency-CDS","chapter":"6 Translation efficiency changes in CDS","heading":"6 Translation efficiency changes in CDS","text":"ribosome footprint (ribo-seq) mRNA (RNA-seq) profiling, applied DESeq2 calculate translation efficiency changes two treatment groups. contrast model log differences two groups Ribo-seq RNA-seq, null hypothesis defined \\[\\begin{equation}\n  H_0: \\Bigg| log\\left(\\frac{treatment 2}{treatment 1}\\right)_{ribo-seq} - log\\left(\\frac{treatment 2}{treatment 1}\\right)_{RNA-seq} \\Bigg| = 0,\n  \\tag{6.1}\n\\end{equation}\\]\ntreatment 2 1 groups DUX-pulse+\\(IFN_\\gamma\\) \\(IFN_\\gamma\\), respectively, DUX-pulse untreated.chapter, illustrate steps code performing discovery translation efficiency changes CDS induced DUX4 (e.g. DUX-pulse+\\(IFN_\\gamma\\) vs. \\(IFN_\\gamma\\).","code":""},{"path":"translation-efficiency-CDS.html","id":"steps","chapter":"6 Translation efficiency changes in CDS","heading":"6.1 Steps","text":"Define genomic features: gene-based CDS; transcript-based features including 5’ UTR, 13 nts /downstream translation start sites, first exons, 3’ UTR.Non-specific filtering:Exclude 92 histone1 (H1) histone 2 (H2) variants DUX4-\\(IFN_\\gamma\\)-induced genes (Chapter 5)loose base-mean filtering RNA-seq ribo-seqPre-estimate size factor: library sizes RNA-seq ribo-seq vastly different, recommend pre-estimate size factor separately using DESeq2 p-site counts (ribo-seq) gene counts (RNA-seq), particularly, CDS, disregard genomic features account .DESeq2: threshold set adjusted \\(p\\)-value < 0.05 \\(|logFC| > 1\\)GO term analysis -regulated translation changesThe flowchart demonstrates workflow results:","code":""},{"path":"translation-efficiency-CDS.html","id":"load-libraries-and-define-parameters","chapter":"6 Translation efficiency changes in CDS","heading":"6.2 Load libraries and define parameters","text":"Note main directory named pkg_dir, , set local path. following code chunks chapter extracted .Loading data sets:","code":"\nlibrary(DESeq2)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\nlibrary(corrr)\nlibrary(plyranges)\nlibrary(wesanderson)\nlibrary(goseq)\nlibrary(org.Hs.eg.db)\nlibrary(hg38.HomoSapiens.Gencode.v35)\ndata(gene.anno)\ntxdb <- hg38.HomoSapiens.Gencode.v35\n\nlibrary(BiocParallel)\nbp_param=MulticoreParam(workers = 4L)\nregister(bp_param, default=TRUE)\n# define parameters\npkg_dir <- \"~/CompBio/DUX4-IFNg-ribosome-footprints\"\nstats_dir <- file.path(pkg_dir, \"stats\", \"translation_changes\", \"CDS\")\nsource(file.path(pkg_dir, \"scripts\", \"06A-tools_TE.R\"))\nsource(file.path(pkg_dir, \"scripts\", \"tools.R\"))\nload(file.path(pkg_dir, \"data\", \"dds_cds_by_gene.rda\"))\n\nmy_color <- wesanderson::wes_palette(\"Darjeeling1\", n=5)[2:5]\nnames(my_color) <- levels(dds_cds_by_gene$treatment)\n\n# define comparison groups\nlist_comp <- list(S1 = c(\"untreated\", \"DOX_pulse\"),\n                  S2 = c(\"untreated\", \"IFNg\"),\n                  S3 = c(\"untreated\", \"DOX_pulse_IFNg\"),\n                  S4 = c(\"IFNg\", \"DOX_pulse\"),\n                  S5 = c(\"DOX_pulse\", \"DOX_pulse_IFNg\"),\n                  S6 = c(\"IFNg\", \"DOX_pulse_IFNg\" ))\n#\n# load rse by genes\n#\nload(file.path(pkg_dir, \"data\", \"rse_cds_by_gene.rda\"))\nload(file.path(pkg_dir, \"data\", \"rse_cds_mRNA.rda\")) # cds by genes\n\n#\n# load DUX4_altered and INFg_altered\n#\nload(file.path(pkg_dir, \"data\", \"DUX4_induced_v2.rda\")) # LFC > 1\nload(file.path(pkg_dir, \"data\", \"IFNg_induced_v2.rda\")) # LFC > 1\n\n#\n# identify H1 and H2 variants and PSM subunits\n#\nhistone_variants <- .histone_variants(gene.anno)\nexclude_gene <- c(histone_variants$gene_id, DUX4_induced_v2$ensembl)\npsm_name <- readxl::read_xlsx(file.path(pkg_dir, \"extdata\", \"Gene Lists_Proteasome_MHC-I.xlsx\"),\n                              sheet=1, range=\"A4:B49\") \nPSM <- as.data.frame(gene.anno) %>% dplyr::select(gene_name, gene_id) %>%\n  dplyr::filter(gene_name %in% psm_name$Symbol)"},{"path":"translation-efficiency-CDS.html","id":"dux4ifn_gamma-vs.-ifn_gamma-in-cds","chapter":"6 Translation efficiency changes in CDS","heading":"6.3 DUX4+\\(IFN_\\gamma\\) vs. \\(IFN_\\gamma\\) in CDS","text":"code chunks performs discovery translation efficiency changes induced DUX4 CDS.Tidy result make scatter plot log fold changes DUX-pulse \\(IFN_\\gamma\\) ribo-seq RNA-seq.\nFigure 6.1: Scatter plot log fold changes DUX-pulse IFN ribo-seq RNA-seq. Blue dots indicate -regulated translation efficiency changes red -regulated.\n","code":"\n# S6: use .comb_RNA_Ribo to combine mRNA and ribosome profilings and \n# define design matrix to be used by DESeq2\ndds_S6 <- .comb_RNA_Ribo(rse_rna = rse_cds_mRNA, \n                         rse_ribo = rse_cds_by_gene, \n                         treatments=list_comp[[\"S6\"]],\n                         rna_mean_filter=10, ribo_mean_filter=5)\ndds_S6 <- dds_S6[!rownames(dds_S6) %in% exclude_gene]        \ndds_S6 <- DESeq(dds_S6)\n#resultsNames(dds_S6)\nS6_ribo_over_rna <- results(dds_S6, \n                            name=\"protocolRibo.treatmentDOX_pulse_IFNg\", \n                            alpha=0.05) # translation efficiency changes\nS6_rna <- results(dds_S6, \n                  name=\"treatment_DOX_pulse_IFNg_vs_IFNg\", alpha=0.05)  \nS6_ribo <- results(dds_S6, \n                   contrast=list(c(\"treatment_DOX_pulse_IFNg_vs_IFNg\",\n                                   \"protocolRibo.treatmentDOX_pulse_IFNg\")),\n                   alpha=0.05)\n# tidy the results and exclude DUX4-induced genes\ntidy_S6_v2 <- .tidy_res_ribo_over_rna(dds=dds_S6, \n                                      inter_res=S6_ribo_over_rna, \n                                      ribo_res=S6_ribo, rna_res=S6_rna,\n                                      alpha=0.05, lfc_threshold=1) %>%\n             dplyr::filter(!ensembl %in% DUX4_induced_v2$ensembl) %>%\n             dplyr::mutate(IFNg_induced_v2 = ensembl %in% IFNg_induced_v2$ensembl)\n\n# scatter plot between log2FC in ribo-seq and in RNA-seq\nres <- tidy_S6_v2\nmsg_up   <- sprintf(\"log2(Ribo / RNA) > 1: %4.0f\", sum(res$status == \"up\"))\nmsg_down <- sprintf(\"log2(Ribo / RNA) < -1: %4.0f\", sum(res$status == \"down\"))  \npearson <- cor(res$rna_lfc, res$ribo_lfc)             \nlabel_x_pos <- 0 \nlabel_y_pos <- -2.5\n\nggplot(res, aes(x=rna_lfc, y=ribo_lfc)) +\n  geom_point(size=2, alpha=0.5, aes(color=status, shape=IFNg_induced_v2)) +\n  theme_bw() +\n  annotate(\"text\", x=label_x_pos, y=label_y_pos, label=paste0(\"Pearson = \", format(pearson, digit=2)),\n           hjust = 0, vjust=1) +\n  annotate(\"text\", x=label_x_pos, y=label_y_pos-0.4, label=msg_up, color=\"red\", \n           hjust = 0, vjust=1) +\n  annotate(\"text\", x=label_x_pos, y=label_y_pos-0.8, label=msg_down, \n           color=\"blue\", hjust=0, vjust=1) +\n  scale_color_manual(values=c(\"gray75\", \"red\", \"blue\")) + \n  scale_shape_manual(values=c(19, 1)) +\n  theme(panel.grid.minor = element_blank(), \n        plot.title = element_text(hjust = 0.5), \n        legend.position=\"bottom\", legend.box=\"vertical\") +\n  labs(x=bquote(~\"RNA-seq:\" ~log[2]~\"(DOX_pulse_IFNg / IFNg)\"), \n       y=bquote(~\"Ribo-seq:\" ~log[2]~\"(DOX_pulse_IFNg / IFNg)\"), \n       title=\"Ribo-seq vs. RNA-seq (exclude DUX4-induced)\", shape=\"IFNg-induced\") "},{"path":"translation-efficiency-CDS.html","id":"go-term-analysis","chapter":"6 Translation efficiency changes in CDS","heading":"6.4 GO term analysis","text":"Table 6.1: Top 10 enriched GO terms determined -regulated translation efficiency induced DUX4.","code":"\n# take down-regulated translation efficiency and use goseq to find the\n# affected GO terms. Display the top 10.\ninterested <- tidy_S6_v2 %>% dplyr::filter(status==\"down\")\nuniversal <- tidy_S6_v2 %>% pull(ensembl) %>% str_replace(\"\\\\..*\", \"\")\nselected <- interested %>% pull(ensembl) %>% str_replace(\"\\\\..*\", \"\")\nenriched_go <- .do_goseq(universal=universal, selected_gene=selected,  p_value=0.3,\n                         return.DEInCat=FALSE, dds=dds_S6)\nknitr::kable(enriched_go[1:10, ], caption=\"Top 10 enriched GO terms determined by down-regulated translation efficiency induced by DUX4.\" )"},{"path":"adjMEF.html","id":"adjMEF","chapter":"7 Free energy","heading":"7 Free energy","text":"five collections 5’UTR use ShortRead, BioStrings BSgenome.Hsapiens.UCSC.hg38 packages get squences.annotated 5’ UTR (79,176): transcript-based unique 5’ UTR model Gencode v35DUX4 targets: 88 targets identified Polysome-seq, 5’UTR include annotated un-annotated identified SESeq packages; DUX4-targets-polysome-84 get ? Hint: 110-HDUX4-promoter.R checked candidate alternative splice events, alternative first exon (AFE) alternative start site (). genes use alernative start site / first exon, dont’. DUX4-targets-novel--annotated-5'UTR.xlsx.-regulated translational efficiency Ribo-seq (S6) 5’UTR region: TE Ribo-seqTE list poly-seq: TE dwon Poly-seq, total 5,800 genes; high/subThe plan calculate free energy five collections 5’UTR implemented 09B-5UTR-structure.R.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
